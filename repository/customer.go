package repository

import (
	"tesss/entity"

	"gorm.io/gorm"
)

type CustomerRepository interface {
	SaveCustomer(customer entity.Customer) (entity.Customer, error)
	UpdateCustomer(customer entity.Customer) (entity.Customer, error)
	FindByIDCustomer(ID int) (entity.Customer, error)
	FindAllCustomer() ([]entity.Customer, error)
	DeleteByIDCustomer(ID int) (string error)
}

type customerRepository struct {
	db *gorm.DB
}

func NewCustomerRepository(db *gorm.DB) *customerRepository {
	return &customerRepository{db}
}

func (r *customerRepository) SaveCustomer(customer entity.Customer) (entity.Customer, error) {
	err := r.db.Create(&customer).Error
	if err != nil {
		return customer, err
	}
	return customer, nil

}
func (r *customerRepository) FindByIDCustomer(ID int) (entity.Customer, error) {
	var customer entity.Customer
	err := r.db.Where("id = ? ", ID).Find(&customer).Error
	if err != nil {
		return customer, err
	}
	return customer, nil

}
func (r *customerRepository) UpdateCustomer(customer entity.Customer) (entity.Customer, error) {
	err := r.db.Save(&customer).Error
	if err != nil {
		return customer, err
	}
	return customer, nil

}
func (r *customerRepository) FindAllCustomer() ([]entity.Customer, error) {
	var customers []entity.Customer
	err := r.db.Find(&customers).Error
	if err != nil {
		return customers, err
	}
	return customers, nil

}
func (r *customerRepository) DeleteByIDCustomer(ID int) (entity.Customer, error) {
	var customer entity.Customer
	err := r.db.Where("id = ? ", ID).Delete(&customer).Error
	if err != nil {
		return customer, err
	}
	return customer, nil

}

//Generated by Micagen at 28 Oktober 2021
